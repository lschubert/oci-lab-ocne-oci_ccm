---
# Steps to configure olcnectl for proper use
- name: Configure olcnectl completion
  lineinfile:
    line: source <(olcnectl completion bash)
    path: ${HOME}/.bashrc
  become: true
  become_user: "{{ install_user}}"
- name: Configure olcnectl environment settings
  blockinfile:
    path: ${HOME}/.bashrc
    block: |
      export OLCNE_SM_CA_PATH=/etc/olcne/configs/certificates/production/ca.cert
      export OLCNE_SM_CERT_PATH=/etc/olcne/configs/certificates/production/node.cert
      export OLCNE_SM_KEY_PATH=/etc/olcne/configs/certificates/production/node.key
  become: true
  become_user: "{{ install_user}}"
- name: Prepare Certificates storage
  file:
    path: /home/{{ install_user }}/.olcne/certificates/
    state: directory
  become: true
  become_user: "{{ install_user }}"  
- name: Configure Certificates for CLI
  file:
    src: /etc/olcne/configs/certificates/restrict_external_ip/production/{{ item }}
    dest: /home/{{ install_user }}/.olcne/certificates/{{ item }}
    state: link
  become: true
  loop:
    - node.cert
    - node.key
    - ca.cert
    
- name: Configure the firewall 
  firewalld:
    port: "{{ item }}"
    zone: public
    permanent: yes
    immediate: yes
    state: enabled
  become: true  
  loop:
    - 10256/tcp
- name: Gather OCI VCN OCID
  shell: |
    oci network vcn list --compartment-id $OCI_COMPARTMENT_OCID | jq -r '.[][].id'
  register: vcn_ocid_result
  delegate_to: localhost
- name: Gather OCI Subnet OCID
  shell: |
    oci network subnet list --compartment-id $OCI_COMPARTMENT_OCID | jq -r '.[][].id'
  register: subnet_ocid_result
  delegate_to: localhost
- name: Set Facts
  set_fact:
    compartment_ocid: "{{ lookup('ansible.builtin.env', 'OCI_COMPARTMENT_OCID', default=Undefined) }}"
    vcn_ocid: "{{ vcn_ocid_result.stdout }}"
    subnet_ocid: "{{ subnet_ocid_result.stdout }}"
  delegate_to: localhost
- name: DEBUG output
  debug:
    var: compartment_ocid
  when: debug_output == true
  loop:
    - compartment_ocid
    - vcn_ocid
    - subnet_ocid
- name: Configure Environment
  template:
    src: templates/myenvironment-oci_ccm.j2
    dest: /home/{{install_user}}/myenvironment-oci_ccm.yml
  become: true
  become_user: "{{ install_user }}"
- name: Create modules
  shell: |
    olcnectl module create --config-file ${HOME}/myenvironment-oci_ccm.yaml
  become: true
  become_user: "{{ install_user}}"
  register: ocne_module_create
- name: DEBUG output
  debug:
    var: ocne_module_create
  when: (debug_output == true) and (ocne_module_create.rc != 0)
- name: Validate modules
  shell: |
    olcnectl module validate --config-file ${HOME}/myenvironment-oci_ccm.yaml
  become: true
  become_user: "{{ install_user}}"
  register: ocne_module_validate
- name: DEBUG output
  debug:
    var: ocne_module_validate
  when: debug_output == true
- name: Install modules
  shell: |
    olcnectl module install --config-file ${HOME}/myenvironment-oci_ccm.yaml
  become: true
  become_user: "{{ install_user}}"
  register: ocne_module_install
- name: DEBUG output
  debug:
    var: ocne_module_install
  when: debug_output == true
- name: Gather installed modules
  shell: |
    olcnectl module instances --config-file ${HOME}/myenvironment-oci_ccm.yaml
  become: true 
  become_user: "{{ install_user}}"
  register: ocne_module_instances
- name: Show installed modules
  debug:
    var: ocne_module_instances
- name: Copy deployment spec
  copy:
    src: files/echo-oci-lb.yml
    dest: /home/{{ install_user }}/echo-oci-lb.yml
  become: true
  become_user: "{{ install_user}}"
- name: Create deployment and service
  shell: |
    kubectl create -f /home/{{ install_user }}/echo-oci-lb.yml
  become: true
  become_user: "{{ install_user}}"
- name: Check Deployment state
  shell: |
    kubectl get deployment
  become: true
  become_user: "{{ install_user}}"
  register: get_deployment
- name: DEBUG output
  debug:
    var: get_deployment
  when: debug_output == true
- name: Check service
  shell: |
    kubectl get svc
  become: true
  become_user: "{{ install_user}}"
  register: get_svc
  retries: 30
  delay: 30
  until: '"<pending>" not in get_svc.stdout'

- name: Capture Loadbalancer IP address
  shell: |
    kubectl get svc -o jsonpath="{.status.loadBalancer.ingress[0].ip}" echo-lb-service
  become: true
  become_user: "{{ install_user }}"
  register: external_ip_result
- name: Capture Loadbalancer Port
  shell: |
    kubectl get svc -o jsonpath="{.spec.ports[0].port}" echo-lb-service
  become: true
  become_user: "{{ install_user }}"
  register: lb_port_result
- name: Set facts
  set_fact:
    lb_ip: "{{ external_ip_result.stdout }}"
    lb_port: "{{ lb_port_result.stdout }}"
- name: DEBUG output
  debug:
    var: "{{ item }}"
  when: debug_output == true
  loop:
    - lb_ip
    - lb_port
- name: setting environment
  lineinfile:
    path: /home/{{ install_user }}/.bashrc
    line: "{{ item }}"
  become: true
  become_user: "{{ install_user }}"
  loop:
    - "export LB={{ lb_ip }}"
    - "export LBPORT={{ lb_port }}"
